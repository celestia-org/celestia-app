// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qgb/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryLastValsetRequestsRequest
type QueryLastValsetRequestsRequest struct {
}

func (m *QueryLastValsetRequestsRequest) Reset()         { *m = QueryLastValsetRequestsRequest{} }
func (m *QueryLastValsetRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastValsetRequestsRequest) ProtoMessage()    {}
func (*QueryLastValsetRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{0}
}
func (m *QueryLastValsetRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastValsetRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastValsetRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastValsetRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastValsetRequestsRequest.Merge(m, src)
}
func (m *QueryLastValsetRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastValsetRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastValsetRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastValsetRequestsRequest proto.InternalMessageInfo

// QueryLastValsetRequestsResponse
type QueryLastValsetRequestsResponse struct {
	Valsets []Valset `protobuf:"bytes,1,rep,name=valsets,proto3" json:"valsets"`
}

func (m *QueryLastValsetRequestsResponse) Reset()         { *m = QueryLastValsetRequestsResponse{} }
func (m *QueryLastValsetRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastValsetRequestsResponse) ProtoMessage()    {}
func (*QueryLastValsetRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{1}
}
func (m *QueryLastValsetRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastValsetRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastValsetRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastValsetRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastValsetRequestsResponse.Merge(m, src)
}
func (m *QueryLastValsetRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastValsetRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastValsetRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastValsetRequestsResponse proto.InternalMessageInfo

func (m *QueryLastValsetRequestsResponse) GetValsets() []Valset {
	if m != nil {
		return m.Valsets
	}
	return nil
}

// QueryValsetRequestByNonceRequest
type QueryValsetRequestByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryValsetRequestByNonceRequest) Reset()         { *m = QueryValsetRequestByNonceRequest{} }
func (m *QueryValsetRequestByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetRequestByNonceRequest) ProtoMessage()    {}
func (*QueryValsetRequestByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{2}
}
func (m *QueryValsetRequestByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetRequestByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetRequestByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetRequestByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetRequestByNonceRequest.Merge(m, src)
}
func (m *QueryValsetRequestByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetRequestByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetRequestByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetRequestByNonceRequest proto.InternalMessageInfo

func (m *QueryValsetRequestByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryValsetRequestByNonceResponse
type QueryValsetRequestByNonceResponse struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *QueryValsetRequestByNonceResponse) Reset()         { *m = QueryValsetRequestByNonceResponse{} }
func (m *QueryValsetRequestByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetRequestByNonceResponse) ProtoMessage()    {}
func (*QueryValsetRequestByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{3}
}
func (m *QueryValsetRequestByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetRequestByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetRequestByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetRequestByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetRequestByNonceResponse.Merge(m, src)
}
func (m *QueryValsetRequestByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetRequestByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetRequestByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetRequestByNonceResponse proto.InternalMessageInfo

func (m *QueryValsetRequestByNonceResponse) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

// QueryParamsRequest
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryValsetConfirmsByNonceRequest
type QueryValsetConfirmsByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryValsetConfirmsByNonceRequest) Reset()         { *m = QueryValsetConfirmsByNonceRequest{} }
func (m *QueryValsetConfirmsByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmsByNonceRequest) ProtoMessage()    {}
func (*QueryValsetConfirmsByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{6}
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmsByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmsByNonceRequest.Merge(m, src)
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmsByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmsByNonceRequest proto.InternalMessageInfo

func (m *QueryValsetConfirmsByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryValsetConfirmsByNonceResponse
type QueryValsetConfirmsByNonceResponse struct {
	Confirms []MsgValsetConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms"`
}

func (m *QueryValsetConfirmsByNonceResponse) Reset()         { *m = QueryValsetConfirmsByNonceResponse{} }
func (m *QueryValsetConfirmsByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmsByNonceResponse) ProtoMessage()    {}
func (*QueryValsetConfirmsByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{7}
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmsByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmsByNonceResponse.Merge(m, src)
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmsByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmsByNonceResponse proto.InternalMessageInfo

func (m *QueryValsetConfirmsByNonceResponse) GetConfirms() []MsgValsetConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

// QueryValsetConfirmRequest ValSet confirm query request
type QueryValsetConfirmRequest struct {
	Nonce   uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryValsetConfirmRequest) Reset()         { *m = QueryValsetConfirmRequest{} }
func (m *QueryValsetConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmRequest) ProtoMessage()    {}
func (*QueryValsetConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{8}
}
func (m *QueryValsetConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmRequest.Merge(m, src)
}
func (m *QueryValsetConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmRequest proto.InternalMessageInfo

func (m *QueryValsetConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryValsetConfirmRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryValsetConfirmResponse ValSet confirm query response
type QueryValsetConfirmResponse struct {
	Confirm *MsgValsetConfirm `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryValsetConfirmResponse) Reset()         { *m = QueryValsetConfirmResponse{} }
func (m *QueryValsetConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmResponse) ProtoMessage()    {}
func (*QueryValsetConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{9}
}
func (m *QueryValsetConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmResponse.Merge(m, src)
}
func (m *QueryValsetConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmResponse proto.InternalMessageInfo

func (m *QueryValsetConfirmResponse) GetConfirm() *MsgValsetConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

// QueryDataCommitmentConfirmsRequest Data commitment confirm by commitment and
// validator address request
type QueryDataCommitmentConfirmRequest struct {
	Commitment string `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDataCommitmentConfirmRequest) Reset()         { *m = QueryDataCommitmentConfirmRequest{} }
func (m *QueryDataCommitmentConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataCommitmentConfirmRequest) ProtoMessage()    {}
func (*QueryDataCommitmentConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{10}
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmRequest.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmRequest) GetCommitment() string {
	if m != nil {
		return m.Commitment
	}
	return ""
}

func (m *QueryDataCommitmentConfirmRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryDataCommitmentConfirmsResponse Data commitment confirm by commitment and
// validator address response
type QueryDataCommitmentConfirmResponse struct {
	Confirm *MsgDataCommitmentConfirm `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryDataCommitmentConfirmResponse) Reset()         { *m = QueryDataCommitmentConfirmResponse{} }
func (m *QueryDataCommitmentConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataCommitmentConfirmResponse) ProtoMessage()    {}
func (*QueryDataCommitmentConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{11}
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmResponse.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmResponse) GetConfirm() *MsgDataCommitmentConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

// QueryDataCommitmentConfirmsRequest Data commitment confirms by commitment
// request
type QueryDataCommitmentConfirmsByCommitmentRequest struct {
	Commitment string `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *QueryDataCommitmentConfirmsByCommitmentRequest) Reset() {
	*m = QueryDataCommitmentConfirmsByCommitmentRequest{}
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByCommitmentRequest) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{12}
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentRequest.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByCommitmentRequest) GetCommitment() string {
	if m != nil {
		return m.Commitment
	}
	return ""
}

// QueryDataCommitmentConfirmsResponse Data commitment confirms by commitment
// response
type QueryDataCommitmentConfirmsByCommitmentResponse struct {
	Confirms []MsgDataCommitmentConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms"`
}

func (m *QueryDataCommitmentConfirmsByCommitmentResponse) Reset() {
	*m = QueryDataCommitmentConfirmsByCommitmentResponse{}
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByCommitmentResponse) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{13}
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentResponse.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByCommitmentResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByCommitmentResponse) GetConfirms() []MsgDataCommitmentConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

// QueryDataCommitmentConfirmsByRangeRequest Data commitment confirms by range
// request
type QueryDataCommitmentConfirmsByRangeRequest struct {
	BeginBlock int64 `protobuf:"varint,1,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
	EndBlock   int64 `protobuf:"varint,2,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (m *QueryDataCommitmentConfirmsByRangeRequest) Reset() {
	*m = QueryDataCommitmentConfirmsByRangeRequest{}
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByRangeRequest) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{14}
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByRangeRequest.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByRangeRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByRangeRequest) GetBeginBlock() int64 {
	if m != nil {
		return m.BeginBlock
	}
	return 0
}

func (m *QueryDataCommitmentConfirmsByRangeRequest) GetEndBlock() int64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

// QueryDataCommitmentConfirmsByRangeResponse Data commitment confirms by range
// response
type QueryDataCommitmentConfirmsByRangeResponse struct {
	Confirms []MsgDataCommitmentConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms"`
}

func (m *QueryDataCommitmentConfirmsByRangeResponse) Reset() {
	*m = QueryDataCommitmentConfirmsByRangeResponse{}
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByRangeResponse) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{15}
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByRangeResponse.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByRangeResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByRangeResponse) GetConfirms() []MsgDataCommitmentConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

// QueryDataCommitmentConfirmsByValidatorRequest Data commitment confirms by
// validator address request
type QueryDataCommitmentConfirmsByValidatorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDataCommitmentConfirmsByValidatorRequest) Reset() {
	*m = QueryDataCommitmentConfirmsByValidatorRequest{}
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByValidatorRequest) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{16}
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorRequest.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByValidatorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryDataCommitmentConfirmsByValidatorResponse Data commitment confirms by
// validator address response
type QueryDataCommitmentConfirmsByValidatorResponse struct {
	Confirms []MsgDataCommitmentConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms"`
}

func (m *QueryDataCommitmentConfirmsByValidatorResponse) Reset() {
	*m = QueryDataCommitmentConfirmsByValidatorResponse{}
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByValidatorResponse) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{17}
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorResponse.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByValidatorResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByValidatorResponse) GetConfirms() []MsgDataCommitmentConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLastValsetRequestsRequest)(nil), "qgb.QueryLastValsetRequestsRequest")
	proto.RegisterType((*QueryLastValsetRequestsResponse)(nil), "qgb.QueryLastValsetRequestsResponse")
	proto.RegisterType((*QueryValsetRequestByNonceRequest)(nil), "qgb.QueryValsetRequestByNonceRequest")
	proto.RegisterType((*QueryValsetRequestByNonceResponse)(nil), "qgb.QueryValsetRequestByNonceResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "qgb.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "qgb.QueryParamsResponse")
	proto.RegisterType((*QueryValsetConfirmsByNonceRequest)(nil), "qgb.QueryValsetConfirmsByNonceRequest")
	proto.RegisterType((*QueryValsetConfirmsByNonceResponse)(nil), "qgb.QueryValsetConfirmsByNonceResponse")
	proto.RegisterType((*QueryValsetConfirmRequest)(nil), "qgb.QueryValsetConfirmRequest")
	proto.RegisterType((*QueryValsetConfirmResponse)(nil), "qgb.QueryValsetConfirmResponse")
	proto.RegisterType((*QueryDataCommitmentConfirmRequest)(nil), "qgb.QueryDataCommitmentConfirmRequest")
	proto.RegisterType((*QueryDataCommitmentConfirmResponse)(nil), "qgb.QueryDataCommitmentConfirmResponse")
	proto.RegisterType((*QueryDataCommitmentConfirmsByCommitmentRequest)(nil), "qgb.QueryDataCommitmentConfirmsByCommitmentRequest")
	proto.RegisterType((*QueryDataCommitmentConfirmsByCommitmentResponse)(nil), "qgb.QueryDataCommitmentConfirmsByCommitmentResponse")
	proto.RegisterType((*QueryDataCommitmentConfirmsByRangeRequest)(nil), "qgb.QueryDataCommitmentConfirmsByRangeRequest")
	proto.RegisterType((*QueryDataCommitmentConfirmsByRangeResponse)(nil), "qgb.QueryDataCommitmentConfirmsByRangeResponse")
	proto.RegisterType((*QueryDataCommitmentConfirmsByValidatorRequest)(nil), "qgb.QueryDataCommitmentConfirmsByValidatorRequest")
	proto.RegisterType((*QueryDataCommitmentConfirmsByValidatorResponse)(nil), "qgb.QueryDataCommitmentConfirmsByValidatorResponse")
}

func init() { proto.RegisterFile("qgb/query.proto", fileDescriptor_f3c1fd86445aad81) }

var fileDescriptor_f3c1fd86445aad81 = []byte{
	// 925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xaf, 0xdb, 0xad, 0x5d, 0x4f, 0x34, 0x10, 0xa7, 0x09, 0x0b, 0x5e, 0xeb, 0x66, 0xde, 0x28,
	0xdd, 0xd0, 0x72, 0xd5, 0x0e, 0x54, 0x78, 0x40, 0xa0, 0x0c, 0xa1, 0x4d, 0xd0, 0x52, 0x2c, 0xb1,
	0x07, 0xa4, 0x69, 0xba, 0x4e, 0x2e, 0xc6, 0x22, 0xf6, 0x75, 0x7c, 0xdd, 0x89, 0x28, 0xca, 0x0b,
	0x2f, 0x3c, 0x20, 0x24, 0x24, 0xbe, 0x0c, 0x5f, 0x00, 0x69, 0x4f, 0x68, 0x12, 0x0f, 0xf0, 0x84,
	0x50, 0xcb, 0x07, 0x99, 0x72, 0x7d, 0xed, 0xd8, 0xb1, 0xe3, 0x64, 0xd2, 0x9e, 0x72, 0xef, 0xf9,
	0xf3, 0x3b, 0xbf, 0xdf, 0xbd, 0xd7, 0x27, 0x07, 0x5e, 0x1f, 0x38, 0x36, 0x19, 0x9c, 0xb1, 0x70,
	0xd8, 0x0e, 0x42, 0x1e, 0x71, 0x5c, 0x1b, 0x38, 0xb6, 0xfe, 0xc6, 0xc4, 0xea, 0x30, 0x9f, 0x09,
	0x57, 0xc4, 0x76, 0x5d, 0x06, 0x46, 0xc3, 0x80, 0x25, 0x86, 0x6d, 0x87, 0x73, 0xa7, 0xcf, 0x08,
	0x0d, 0x5c, 0x42, 0x7d, 0x9f, 0x47, 0x34, 0x72, 0xb9, 0x9f, 0x78, 0xef, 0x74, 0xb9, 0xf0, 0xb8,
	0x20, 0x36, 0x15, 0x2c, 0xc6, 0x27, 0x4f, 0x0f, 0x6c, 0x16, 0xd1, 0x03, 0x12, 0x50, 0xc7, 0xf5,
	0x65, 0xb0, 0x8a, 0x7d, 0x6d, 0x02, 0xed, 0x09, 0x27, 0xc9, 0xad, 0x3b, 0xdc, 0xe1, 0x72, 0x49,
	0x26, 0xab, 0xd8, 0x6a, 0xb6, 0xc0, 0xf8, 0x6a, 0x82, 0xf3, 0x05, 0x15, 0xd1, 0x23, 0xda, 0x17,
	0x2c, 0xb2, 0xd8, 0xe0, 0x8c, 0x89, 0x48, 0xa8, 0x5f, 0xf3, 0x04, 0x76, 0xe7, 0x46, 0x88, 0x80,
	0xfb, 0x82, 0xe1, 0xbb, 0xb0, 0xf1, 0x54, 0x7a, 0x44, 0x53, 0x6b, 0xad, 0xed, 0xd7, 0x0e, 0x6b,
	0xed, 0x81, 0x63, 0xb7, 0xe3, 0xe8, 0xce, 0xa5, 0x67, 0xff, 0xee, 0xae, 0x58, 0x49, 0x84, 0xf9,
	0x01, 0xb4, 0x24, 0x5e, 0x0e, 0xab, 0x33, 0x3c, 0xe1, 0x7e, 0x97, 0xa9, 0x1d, 0xd6, 0xe1, 0xb2,
	0x3f, 0xd9, 0x37, 0xb5, 0x96, 0xb6, 0x7f, 0xc9, 0x8a, 0x37, 0xe6, 0x03, 0xb8, 0x51, 0x91, 0xa9,
	0xb8, 0xdc, 0x84, 0xf5, 0xb8, 0x92, 0xcc, 0xcd, 0x53, 0xb1, 0x94, 0xcb, 0xac, 0x03, 0x4a, 0xa4,
	0x53, 0x1a, 0x52, 0x2f, 0x55, 0xfa, 0x09, 0x6c, 0xe5, 0xac, 0x0a, 0xf1, 0x36, 0xac, 0x07, 0xd2,
	0x92, 0x43, 0x8c, 0x83, 0x94, 0x38, 0x15, 0x60, 0x7e, 0x98, 0x63, 0x78, 0x9f, 0xfb, 0xdf, 0xba,
	0xa1, 0x27, 0x96, 0x12, 0xf7, 0x18, 0xcc, 0xaa, 0x54, 0xc5, 0xe5, 0x08, 0xae, 0x74, 0x95, 0x4b,
	0x1d, 0x75, 0x43, 0xb2, 0x39, 0x16, 0x4e, 0x2e, 0x51, 0xf1, 0x4a, 0x83, 0xcd, 0xcf, 0xe1, 0xad,
	0x22, 0x7c, 0x25, 0x23, 0x6c, 0xc2, 0x06, 0xed, 0xf5, 0x42, 0x26, 0x44, 0x73, 0xb5, 0xa5, 0xed,
	0x6f, 0x5a, 0xc9, 0xd6, 0x3c, 0x06, 0xbd, 0x0c, 0x4c, 0x71, 0x24, 0xb0, 0xa1, 0xca, 0xaa, 0x03,
	0x2b, 0xa7, 0x68, 0x25, 0x51, 0xe6, 0x63, 0x75, 0x6a, 0x9f, 0xd2, 0x88, 0xde, 0xe7, 0x9e, 0xe7,
	0x46, 0x1e, 0xf3, 0x67, 0x39, 0x1a, 0x00, 0xdd, 0xd4, 0x27, 0x81, 0x37, 0xad, 0x8c, 0xa5, 0x82,
	0x6d, 0x72, 0xb2, 0x73, 0xe0, 0xd3, 0x93, 0x9d, 0x61, 0xbd, 0x93, 0xb0, 0x2e, 0xcf, 0x4b, 0xd9,
	0x9f, 0x42, 0x7b, 0x3e, 0xbc, 0xe8, 0x0c, 0xa7, 0xb6, 0x25, 0xa5, 0x98, 0x21, 0x90, 0xa5, 0x11,
	0x15, 0xfb, 0x8f, 0x0b, 0xef, 0xa2, 0x9a, 0x7e, 0xe1, 0x7d, 0xb8, 0x70, 0xbb, 0xb2, 0xa6, 0x45,
	0x7d, 0x27, 0x7d, 0xc1, 0xbb, 0x50, 0xb3, 0x99, 0xe3, 0xfa, 0x4f, 0xec, 0x3e, 0xef, 0x7e, 0x2f,
	0x15, 0xac, 0x59, 0x20, 0x4d, 0x9d, 0x89, 0x05, 0xaf, 0xc3, 0x26, 0xf3, 0x7b, 0xca, 0xbd, 0x2a,
	0xdd, 0x57, 0x98, 0xdf, 0x93, 0x4e, 0xd3, 0x83, 0x3b, 0xcb, 0x94, 0x7a, 0x55, 0xca, 0x1e, 0xc2,
	0xdd, 0xca, 0x72, 0x8f, 0x68, 0xdf, 0xed, 0xd1, 0x88, 0x87, 0x89, 0xba, 0xcc, 0x4b, 0xd2, 0xf2,
	0x2f, 0x69, 0xb0, 0xe0, 0xaa, 0x33, 0x50, 0xaf, 0x88, 0xfd, 0xe1, 0x2f, 0x35, 0xb8, 0x2c, 0x6b,
	0xe2, 0x29, 0xac, 0xc7, 0x3d, 0x07, 0xaf, 0x49, 0x88, 0x62, 0x03, 0xd3, 0x9b, 0x45, 0x47, 0xcc,
	0xc3, 0xdc, 0xfa, 0xf1, 0xaf, 0xff, 0x7f, 0x5b, 0xbd, 0x8a, 0x35, 0x32, 0xf9, 0x57, 0x88, 0xbb,
	0x15, 0xfe, 0xae, 0x41, 0xa3, 0x94, 0x05, 0xee, 0x4d, 0x81, 0xaa, 0x3e, 0x4a, 0xfd, 0x9d, 0x85,
	0x71, 0xaa, 0xfe, 0x89, 0xac, 0xff, 0x00, 0x3f, 0x93, 0xf5, 0x7b, 0x34, 0xa2, 0x4f, 0xa6, 0x0f,
	0x9e, 0x28, 0xb5, 0x44, 0x9d, 0x33, 0x19, 0xa9, 0xc5, 0x98, 0x64, 0x82, 0x46, 0xd3, 0xf5, 0x18,
	0xff, 0xd0, 0xe0, 0xc6, 0xc2, 0x5b, 0xc0, 0xc3, 0x05, 0xf4, 0x4a, 0x6e, 0x5f, 0xbf, 0xf7, 0x52,
	0x39, 0x4a, 0xde, 0x91, 0x94, 0x77, 0x80, 0xa4, 0x4a, 0x9e, 0x28, 0xea, 0xc3, 0x3f, 0x35, 0x30,
	0x17, 0x7f, 0xe6, 0xb8, 0x04, 0xa9, 0x42, 0x9b, 0xd1, 0xdf, 0x7b, 0xb9, 0x24, 0x25, 0xe5, 0x23,
	0x29, 0xe5, 0x08, 0xdf, 0xaf, 0x96, 0x32, 0xef, 0x62, 0xfe, 0xd6, 0x60, 0xa7, 0xf2, 0xc3, 0xc6,
	0xf6, 0x62, 0x5a, 0xd9, 0x66, 0xa3, 0x93, 0xa5, 0xe3, 0x95, 0x82, 0xaf, 0xa5, 0x82, 0x2f, 0xf1,
	0xb8, 0x5a, 0x41, 0xa6, 0x83, 0x91, 0x51, 0x66, 0x33, 0x26, 0x69, 0xeb, 0x22, 0xa3, 0x74, 0x39,
	0xc6, 0x31, 0x60, 0x71, 0x04, 0xc2, 0x9b, 0x53, 0x76, 0x73, 0x47, 0x28, 0xfd, 0x56, 0x75, 0x90,
	0xe2, 0xbd, 0x2d, 0x79, 0xbf, 0x89, 0x75, 0xc9, 0x3b, 0x9e, 0x54, 0x48, 0x98, 0x14, 0xfa, 0x59,
	0x83, 0x7a, 0xd9, 0xe0, 0x83, 0x6f, 0x4f, 0xc1, 0x2b, 0x46, 0x2a, 0x7d, 0x6f, 0x51, 0x98, 0x62,
	0x71, 0x4b, 0xb2, 0x30, 0x70, 0xbb, 0x8c, 0x05, 0x19, 0xc9, 0xd1, 0x60, 0x8c, 0x1e, 0x5c, 0xcd,
	0xfd, 0x99, 0xa3, 0x31, 0x0b, 0x3f, 0xd3, 0x29, 0x76, 0xe7, 0xfa, 0x55, 0xdd, 0xeb, 0xb2, 0x6e,
	0x03, 0xb7, 0xb2, 0x75, 0xd5, 0x65, 0xe1, 0x4f, 0x1a, 0x34, 0x4a, 0x07, 0x23, 0xdc, 0x9b, 0x83,
	0x3b, 0x33, 0x74, 0x65, 0x3b, 0x55, 0xe5, 0x84, 0x65, 0xee, 0x48, 0x1e, 0xd7, 0xb0, 0x21, 0x79,
	0xa4, 0xaf, 0x45, 0x09, 0xef, 0x3c, 0x7c, 0x76, 0x6e, 0x68, 0xcf, 0xcf, 0x0d, 0xed, 0xbf, 0x73,
	0x43, 0xfb, 0xf5, 0xc2, 0x58, 0x79, 0x7e, 0x61, 0xac, 0xfc, 0x73, 0x61, 0xac, 0x7c, 0x43, 0x1c,
	0x37, 0xfa, 0xee, 0xcc, 0x6e, 0x77, 0xb9, 0x47, 0xba, 0xac, 0xcf, 0x44, 0xe4, 0x52, 0x1e, 0x3a,
	0xe9, 0xfa, 0x2e, 0x0d, 0x02, 0xf2, 0x03, 0x49, 0x07, 0x7e, 0x7b, 0x5d, 0x4e, 0xe0, 0xf7, 0x5e,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xfe, 0x6b, 0xe3, 0x2d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params Queries the current parameters for the qgb module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DataCommitmentConfirm Queries the data commitment confirm by the commitment
	// and the validator address
	DataCommitmentConfirm(ctx context.Context, in *QueryDataCommitmentConfirmRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmResponse, error)
	// DataCommitmentConfirmsByValidator Queries data commitment confirms by
	// validator address
	DataCommitmentConfirmsByValidator(ctx context.Context, in *QueryDataCommitmentConfirmsByValidatorRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByValidatorResponse, error)
	// DataCommitmentConfirms Queries data commitment confirms by the actual
	// commitment
	DataCommitmentConfirmsByCommitment(ctx context.Context, in *QueryDataCommitmentConfirmsByCommitmentRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByCommitmentResponse, error)
	// DataCommitmentConfirmsByRange Queries data commitment confirms by a block
	// range
	DataCommitmentConfirmsByRange(ctx context.Context, in *QueryDataCommitmentConfirmsByRangeRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByRangeResponse, error)
	// LastValsetRequests queries for the latest valset requests
	LastValsetRequests(ctx context.Context, in *QueryLastValsetRequestsRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestsResponse, error)
	// LastValsetRequests queries for the latest valset requests
	ValsetRequestByNonce(ctx context.Context, in *QueryValsetRequestByNonceRequest, opts ...grpc.CallOption) (*QueryValsetRequestByNonceResponse, error)
	// ValsetConfirm Queries ValSetConfirm
	ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error)
	// ValsetConfirmsByNonce
	ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentConfirm(ctx context.Context, in *QueryDataCommitmentConfirmRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmResponse, error) {
	out := new(QueryDataCommitmentConfirmResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/DataCommitmentConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentConfirmsByValidator(ctx context.Context, in *QueryDataCommitmentConfirmsByValidatorRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByValidatorResponse, error) {
	out := new(QueryDataCommitmentConfirmsByValidatorResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/DataCommitmentConfirmsByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentConfirmsByCommitment(ctx context.Context, in *QueryDataCommitmentConfirmsByCommitmentRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByCommitmentResponse, error) {
	out := new(QueryDataCommitmentConfirmsByCommitmentResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/DataCommitmentConfirmsByCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentConfirmsByRange(ctx context.Context, in *QueryDataCommitmentConfirmsByRangeRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByRangeResponse, error) {
	out := new(QueryDataCommitmentConfirmsByRangeResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/DataCommitmentConfirmsByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastValsetRequests(ctx context.Context, in *QueryLastValsetRequestsRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestsResponse, error) {
	out := new(QueryLastValsetRequestsResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/LastValsetRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetRequestByNonce(ctx context.Context, in *QueryValsetRequestByNonceRequest, opts ...grpc.CallOption) (*QueryValsetRequestByNonceResponse, error) {
	out := new(QueryValsetRequestByNonceResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/ValsetRequestByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error) {
	out := new(QueryValsetConfirmResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/ValsetConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error) {
	out := new(QueryValsetConfirmsByNonceResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/ValsetConfirmsByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params Queries the current parameters for the qgb module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DataCommitmentConfirm Queries the data commitment confirm by the commitment
	// and the validator address
	DataCommitmentConfirm(context.Context, *QueryDataCommitmentConfirmRequest) (*QueryDataCommitmentConfirmResponse, error)
	// DataCommitmentConfirmsByValidator Queries data commitment confirms by
	// validator address
	DataCommitmentConfirmsByValidator(context.Context, *QueryDataCommitmentConfirmsByValidatorRequest) (*QueryDataCommitmentConfirmsByValidatorResponse, error)
	// DataCommitmentConfirms Queries data commitment confirms by the actual
	// commitment
	DataCommitmentConfirmsByCommitment(context.Context, *QueryDataCommitmentConfirmsByCommitmentRequest) (*QueryDataCommitmentConfirmsByCommitmentResponse, error)
	// DataCommitmentConfirmsByRange Queries data commitment confirms by a block
	// range
	DataCommitmentConfirmsByRange(context.Context, *QueryDataCommitmentConfirmsByRangeRequest) (*QueryDataCommitmentConfirmsByRangeResponse, error)
	// LastValsetRequests queries for the latest valset requests
	LastValsetRequests(context.Context, *QueryLastValsetRequestsRequest) (*QueryLastValsetRequestsResponse, error)
	// LastValsetRequests queries for the latest valset requests
	ValsetRequestByNonce(context.Context, *QueryValsetRequestByNonceRequest) (*QueryValsetRequestByNonceResponse, error)
	// ValsetConfirm Queries ValSetConfirm
	ValsetConfirm(context.Context, *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error)
	// ValsetConfirmsByNonce
	ValsetConfirmsByNonce(context.Context, *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentConfirm(ctx context.Context, req *QueryDataCommitmentConfirmRequest) (*QueryDataCommitmentConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirm not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentConfirmsByValidator(ctx context.Context, req *QueryDataCommitmentConfirmsByValidatorRequest) (*QueryDataCommitmentConfirmsByValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirmsByValidator not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentConfirmsByCommitment(ctx context.Context, req *QueryDataCommitmentConfirmsByCommitmentRequest) (*QueryDataCommitmentConfirmsByCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirmsByCommitment not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentConfirmsByRange(ctx context.Context, req *QueryDataCommitmentConfirmsByRangeRequest) (*QueryDataCommitmentConfirmsByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirmsByRange not implemented")
}
func (*UnimplementedQueryServer) LastValsetRequests(ctx context.Context, req *QueryLastValsetRequestsRequest) (*QueryLastValsetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastValsetRequests not implemented")
}
func (*UnimplementedQueryServer) ValsetRequestByNonce(ctx context.Context, req *QueryValsetRequestByNonceRequest) (*QueryValsetRequestByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetRequestByNonce not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirm(ctx context.Context, req *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirmsByNonce(ctx context.Context, req *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirmsByNonce not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/DataCommitmentConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentConfirm(ctx, req.(*QueryDataCommitmentConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentConfirmsByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentConfirmsByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentConfirmsByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/DataCommitmentConfirmsByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentConfirmsByValidator(ctx, req.(*QueryDataCommitmentConfirmsByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentConfirmsByCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentConfirmsByCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentConfirmsByCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/DataCommitmentConfirmsByCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentConfirmsByCommitment(ctx, req.(*QueryDataCommitmentConfirmsByCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentConfirmsByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentConfirmsByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentConfirmsByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/DataCommitmentConfirmsByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentConfirmsByRange(ctx, req.(*QueryDataCommitmentConfirmsByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastValsetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastValsetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastValsetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/LastValsetRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastValsetRequests(ctx, req.(*QueryLastValsetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetRequestByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetRequestByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetRequestByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/ValsetRequestByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetRequestByNonce(ctx, req.(*QueryValsetRequestByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/ValsetConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirm(ctx, req.(*QueryValsetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirmsByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmsByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/ValsetConfirmsByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, req.(*QueryValsetConfirmsByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qgb.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DataCommitmentConfirm",
			Handler:    _Query_DataCommitmentConfirm_Handler,
		},
		{
			MethodName: "DataCommitmentConfirmsByValidator",
			Handler:    _Query_DataCommitmentConfirmsByValidator_Handler,
		},
		{
			MethodName: "DataCommitmentConfirmsByCommitment",
			Handler:    _Query_DataCommitmentConfirmsByCommitment_Handler,
		},
		{
			MethodName: "DataCommitmentConfirmsByRange",
			Handler:    _Query_DataCommitmentConfirmsByRange_Handler,
		},
		{
			MethodName: "LastValsetRequests",
			Handler:    _Query_LastValsetRequests_Handler,
		},
		{
			MethodName: "ValsetRequestByNonce",
			Handler:    _Query_ValsetRequestByNonce_Handler,
		},
		{
			MethodName: "ValsetConfirm",
			Handler:    _Query_ValsetConfirm_Handler,
		},
		{
			MethodName: "ValsetConfirmsByNonce",
			Handler:    _Query_ValsetConfirmsByNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qgb/query.proto",
}

func (m *QueryLastValsetRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastValsetRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastValsetRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastValsetRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastValsetRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastValsetRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valsets) > 0 {
		for iNdEx := len(m.Valsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetRequestByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetRequestByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetRequestByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetRequestByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetRequestByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetRequestByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmsByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmsByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmsByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmsByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmsByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmsByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeginBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLastValsetRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastValsetRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Valsets) > 0 {
		for _, e := range m.Valsets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValsetRequestByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryValsetRequestByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValsetConfirmsByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryValsetConfirmsByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValsetConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValsetConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginBlock != 0 {
		n += 1 + sovQuery(uint64(m.BeginBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovQuery(uint64(m.EndBlock))
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLastValsetRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastValsetRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastValsetRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastValsetRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastValsetRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastValsetRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valsets = append(m.Valsets, Valset{})
			if err := m.Valsets[len(m.Valsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetRequestByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetRequestByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetRequestByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetRequestByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetRequestByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetRequestByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmsByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmsByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, MsgValsetConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgValsetConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgDataCommitmentConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, MsgDataCommitmentConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			m.BeginBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, MsgDataCommitmentConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, MsgDataCommitmentConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
