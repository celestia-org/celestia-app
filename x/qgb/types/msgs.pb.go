// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qgb/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgValsetConfirm
// this is the message sent by the validators when they wish to submit their
// signatures over the validator set at a given block height. A validator must
// first call MsgSetEthAddress to set their Ethereum address to be used for
// signing. Then someone (anyone) must make a ValsetRequest, the request is
// essentially a messaging mechanism to determine which block all validators
// should submit signatures over. Finally validators sign the validator set,
// powers, and Ethereum addresses of the entire validator set at the height of a
// ValsetRequest and submit that signature with this message.
//
// If a sufficient number of validators (66% of voting power) (A) have set
// Ethereum addresses and (B) submit ValsetConfirm messages with their
// signatures it is then possible for anyone to view these signatures in the
// chain store and submit them to Ethereum to update the validator set
// -------------
type MsgValsetConfirm struct {
	Nonce        uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EthAddress   string `protobuf:"bytes,3,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	Signature    string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgValsetConfirm) Reset()         { *m = MsgValsetConfirm{} }
func (m *MsgValsetConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgValsetConfirm) ProtoMessage()    {}
func (*MsgValsetConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_c696c358dc748aba, []int{0}
}
func (m *MsgValsetConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetConfirm.Merge(m, src)
}
func (m *MsgValsetConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetConfirm proto.InternalMessageInfo

func (m *MsgValsetConfirm) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgValsetConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgValsetConfirm) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *MsgValsetConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// MsgValsetConfirmResponse describes the response returned after the submission
// of a MsgValsetConfirm.
type MsgValsetConfirmResponse struct {
}

func (m *MsgValsetConfirmResponse) Reset()         { *m = MsgValsetConfirmResponse{} }
func (m *MsgValsetConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValsetConfirmResponse) ProtoMessage()    {}
func (*MsgValsetConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c696c358dc748aba, []int{1}
}
func (m *MsgValsetConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValsetConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValsetConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValsetConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValsetConfirmResponse.Merge(m, src)
}
func (m *MsgValsetConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValsetConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValsetConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValsetConfirmResponse proto.InternalMessageInfo

// MsgDataCommitmentConfirm describes a data commitment for a set of blocks.
type MsgDataCommitmentConfirm struct {
}

func (m *MsgDataCommitmentConfirm) Reset()         { *m = MsgDataCommitmentConfirm{} }
func (m *MsgDataCommitmentConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgDataCommitmentConfirm) ProtoMessage()    {}
func (*MsgDataCommitmentConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_c696c358dc748aba, []int{2}
}
func (m *MsgDataCommitmentConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDataCommitmentConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDataCommitmentConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDataCommitmentConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDataCommitmentConfirm.Merge(m, src)
}
func (m *MsgDataCommitmentConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgDataCommitmentConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDataCommitmentConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDataCommitmentConfirm proto.InternalMessageInfo

// MsgValsetConfirmResponse describes the response returned after the submission
// of a MsgDataCommitmentConfirm.
type MsgDataCommitmentConfirmResponse struct {
}

func (m *MsgDataCommitmentConfirmResponse) Reset()         { *m = MsgDataCommitmentConfirmResponse{} }
func (m *MsgDataCommitmentConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDataCommitmentConfirmResponse) ProtoMessage()    {}
func (*MsgDataCommitmentConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c696c358dc748aba, []int{3}
}
func (m *MsgDataCommitmentConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDataCommitmentConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDataCommitmentConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDataCommitmentConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDataCommitmentConfirmResponse.Merge(m, src)
}
func (m *MsgDataCommitmentConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDataCommitmentConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDataCommitmentConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDataCommitmentConfirmResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgValsetConfirm)(nil), "qgb.MsgValsetConfirm")
	proto.RegisterType((*MsgValsetConfirmResponse)(nil), "qgb.MsgValsetConfirmResponse")
	proto.RegisterType((*MsgDataCommitmentConfirm)(nil), "qgb.MsgDataCommitmentConfirm")
	proto.RegisterType((*MsgDataCommitmentConfirmResponse)(nil), "qgb.MsgDataCommitmentConfirmResponse")
}

func init() { proto.RegisterFile("qgb/msgs.proto", fileDescriptor_c696c358dc748aba) }

var fileDescriptor_c696c358dc748aba = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x3d, 0x4f, 0xe3, 0x40,
	0x14, 0xcc, 0x26, 0xb9, 0x93, 0xb2, 0xf7, 0xa1, 0x93, 0x2f, 0x91, 0x2c, 0x5f, 0xce, 0x17, 0x59,
	0x77, 0x52, 0x9a, 0xf3, 0x4a, 0xf0, 0x0b, 0x20, 0x34, 0x14, 0x69, 0x52, 0x50, 0xd0, 0x44, 0x6b,
	0x67, 0x59, 0x5b, 0x8a, 0xf7, 0x39, 0xbb, 0x2f, 0x08, 0x5a, 0x28, 0x69, 0x90, 0xf8, 0x53, 0x94,
	0x91, 0x68, 0x28, 0x51, 0x42, 0xcf, 0x5f, 0x40, 0xd9, 0xc4, 0x46, 0x89, 0x02, 0xdd, 0x7b, 0x33,
	0xf3, 0x66, 0xc6, 0xf2, 0xd2, 0xef, 0x13, 0x19, 0xb1, 0xcc, 0x48, 0x13, 0xe6, 0x1a, 0x10, 0x9c,
	0xda, 0x44, 0x46, 0x5e, 0x53, 0x82, 0x04, 0xbb, 0xb3, 0xe5, 0xb4, 0xa2, 0xbc, 0xb6, 0x04, 0x90,
	0x63, 0xc1, 0x78, 0x9e, 0x32, 0xae, 0x14, 0x20, 0xc7, 0x14, 0xd4, 0xfa, 0x30, 0xb8, 0x21, 0xf4,
	0x47, 0xdf, 0xc8, 0x13, 0x3e, 0x36, 0x02, 0x7b, 0xa0, 0xce, 0x52, 0x9d, 0x39, 0x4d, 0xfa, 0x49,
	0x81, 0x8a, 0x85, 0x4b, 0x3a, 0xa4, 0x5b, 0x1f, 0xac, 0x16, 0x27, 0xa0, 0x5f, 0x41, 0xc7, 0x89,
	0x30, 0xa8, 0x39, 0x82, 0x76, 0xab, 0x1d, 0xd2, 0x6d, 0x0c, 0x36, 0x30, 0xe7, 0x0f, 0xfd, 0x22,
	0x30, 0x19, 0xf2, 0xd1, 0x48, 0x0b, 0x63, 0xdc, 0x9a, 0x95, 0x50, 0x81, 0xc9, 0xc1, 0x0a, 0x71,
	0xda, 0xb4, 0x61, 0x52, 0xa9, 0x38, 0x4e, 0xb5, 0x70, 0xeb, 0x96, 0x7e, 0x03, 0x02, 0x8f, 0xba,
	0xdb, 0x65, 0x06, 0xc2, 0xe4, 0xa0, 0x4c, 0xc1, 0x1d, 0x71, 0xe4, 0x3d, 0xc8, 0xb2, 0x14, 0x33,
	0xa1, 0x0a, 0x4d, 0x10, 0xd0, 0xce, 0x7b, 0x5c, 0x71, 0xbf, 0xf7, 0x42, 0x68, 0xad, 0x6f, 0xa4,
	0x13, 0xd1, 0x6f, 0x9b, 0x5f, 0xdb, 0x0a, 0x27, 0x32, 0x0a, 0xb7, 0x73, 0xbd, 0xdf, 0x3b, 0xe1,
	0xb2, 0xce, 0xaf, 0xab, 0x87, 0xe7, 0xbb, 0x6a, 0x2b, 0xf8, 0xc9, 0x96, 0xbf, 0xe2, 0xdc, 0x6a,
	0x86, 0xf1, 0xda, 0xf2, 0x9a, 0xd0, 0xd6, 0xce, 0x36, 0x4e, 0xe9, 0xba, 0x93, 0xf6, 0xfe, 0x7d,
	0x48, 0x97, 0xe1, 0x7f, 0x6d, 0xb8, 0x1f, 0xb4, 0x6d, 0xf8, 0x88, 0x23, 0x1f, 0xc6, 0xa5, 0xb8,
	0x68, 0x71, 0x78, 0x7c, 0x3f, 0xf7, 0xc9, 0x6c, 0xee, 0x93, 0xa7, 0xb9, 0x4f, 0x6e, 0x17, 0x7e,
	0x65, 0xb6, 0xf0, 0x2b, 0x8f, 0x0b, 0xbf, 0x72, 0xca, 0x64, 0x8a, 0xc9, 0x34, 0x0a, 0x63, 0xc8,
	0x58, 0x2c, 0xc6, 0xc2, 0x60, 0xca, 0x41, 0xcb, 0x72, 0xfe, 0xcf, 0xf3, 0x9c, 0x5d, 0x58, 0x73,
	0xbc, 0xcc, 0x85, 0x89, 0x3e, 0xdb, 0xd7, 0xb2, 0xff, 0x1a, 0x00, 0x00, 0xff, 0xff, 0x07, 0xdd,
	0x60, 0xa7, 0x78, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ValsetConfirm allows the validators to submit their signatures over the validator set.
	ValsetConfirm(ctx context.Context, in *MsgValsetConfirm, opts ...grpc.CallOption) (*MsgValsetConfirmResponse, error)
	// DataCommitmentConfirm allows the validators to submit a confirmation for a data commitment.
	DataCommitmentConfirm(ctx context.Context, in *MsgDataCommitmentConfirm, opts ...grpc.CallOption) (*MsgDataCommitmentConfirmResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ValsetConfirm(ctx context.Context, in *MsgValsetConfirm, opts ...grpc.CallOption) (*MsgValsetConfirmResponse, error) {
	out := new(MsgValsetConfirmResponse)
	err := c.cc.Invoke(ctx, "/qgb.Msg/ValsetConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DataCommitmentConfirm(ctx context.Context, in *MsgDataCommitmentConfirm, opts ...grpc.CallOption) (*MsgDataCommitmentConfirmResponse, error) {
	out := new(MsgDataCommitmentConfirmResponse)
	err := c.cc.Invoke(ctx, "/qgb.Msg/DataCommitmentConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ValsetConfirm allows the validators to submit their signatures over the validator set.
	ValsetConfirm(context.Context, *MsgValsetConfirm) (*MsgValsetConfirmResponse, error)
	// DataCommitmentConfirm allows the validators to submit a confirmation for a data commitment.
	DataCommitmentConfirm(context.Context, *MsgDataCommitmentConfirm) (*MsgDataCommitmentConfirmResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ValsetConfirm(ctx context.Context, req *MsgValsetConfirm) (*MsgValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (*UnimplementedMsgServer) DataCommitmentConfirm(ctx context.Context, req *MsgDataCommitmentConfirm) (*MsgDataCommitmentConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirm not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValsetConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Msg/ValsetConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValsetConfirm(ctx, req.(*MsgValsetConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DataCommitmentConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDataCommitmentConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DataCommitmentConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Msg/DataCommitmentConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DataCommitmentConfirm(ctx, req.(*MsgDataCommitmentConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qgb.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValsetConfirm",
			Handler:    _Msg_ValsetConfirm_Handler,
		},
		{
			MethodName: "DataCommitmentConfirm",
			Handler:    _Msg_DataCommitmentConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qgb/msgs.proto",
}

func (m *MsgValsetConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgValsetConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValsetConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValsetConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDataCommitmentConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDataCommitmentConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDataCommitmentConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDataCommitmentConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDataCommitmentConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDataCommitmentConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgValsetConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgValsetConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDataCommitmentConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDataCommitmentConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgValsetConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValsetConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValsetConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValsetConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDataCommitmentConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDataCommitmentConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDataCommitmentConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDataCommitmentConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDataCommitmentConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDataCommitmentConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
