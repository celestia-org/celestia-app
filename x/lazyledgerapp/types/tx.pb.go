// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lazyledgerapp/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// the different types of valid transactions in lazyledger
type TransactionType int32

const (
	// Unknown transaction type
	TRANSACTION_TYPE_UNSPECIFIED TransactionType = 0
	// Transfer moves tokens from one address to another
	TRANSACTION_TYPE_TRANSFER TransactionType = 1
	// PayForMessage removes funds from the account paying for the message
	TRANSACTION_TYPE_PAY_FOR_MESSAGE TransactionType = 2
	// CreateValidator creates a new validator
	TRANSACTION_TYPE_CREATE_VALIDATOR TransactionType = 3
	// BeginUnbondingValidator is meant to signal a validator's desire to unbond
	TRANSACTION_TYPE_BEGIN_UNBONDING_VALIDATOR TransactionType = 4
	// UnbondValidator unbonds
	TRANSACTION_TYPE_UNBOND_VALIDATOR TransactionType = 5
	// CreateDelegation begins the process of delegation to a bonded validator
	TRANSACTION_TYPE_CREATE_DELEGATION TransactionType = 6
	// BeginUnbondingDelegation starts the process to stop delegating
	TRANSACTION_TYPE_BEGIN_UNBONDING_DELEGATION TransactionType = 7
	// UnbondDelegation finalizes stopping delegation
	TRANSACTION_TYPE_UNBOND_DELEGATION TransactionType = 8
	// Burn burns tokens from one account
	TRANSACTION_TYPE_BURN TransactionType = 9
)

var TransactionType_name = map[int32]string{
	0: "TRANSACTION_TYPE_UNSPECIFIED",
	1: "TRANSACTION_TYPE_TRANSFER",
	2: "TRANSACTION_TYPE_PAY_FOR_MESSAGE",
	3: "TRANSACTION_TYPE_CREATE_VALIDATOR",
	4: "TRANSACTION_TYPE_BEGIN_UNBONDING_VALIDATOR",
	5: "TRANSACTION_TYPE_UNBOND_VALIDATOR",
	6: "TRANSACTION_TYPE_CREATE_DELEGATION",
	7: "TRANSACTION_TYPE_BEGIN_UNBONDING_DELEGATION",
	8: "TRANSACTION_TYPE_UNBOND_DELEGATION",
	9: "TRANSACTION_TYPE_BURN",
}

var TransactionType_value = map[string]int32{
	"TRANSACTION_TYPE_UNSPECIFIED":                0,
	"TRANSACTION_TYPE_TRANSFER":                   1,
	"TRANSACTION_TYPE_PAY_FOR_MESSAGE":            2,
	"TRANSACTION_TYPE_CREATE_VALIDATOR":           3,
	"TRANSACTION_TYPE_BEGIN_UNBONDING_VALIDATOR":  4,
	"TRANSACTION_TYPE_UNBOND_VALIDATOR":           5,
	"TRANSACTION_TYPE_CREATE_DELEGATION":          6,
	"TRANSACTION_TYPE_BEGIN_UNBONDING_DELEGATION": 7,
	"TRANSACTION_TYPE_UNBOND_DELEGATION":          8,
	"TRANSACTION_TYPE_BURN":                       9,
}

func (x TransactionType) String() string {
	return proto.EnumName(TransactionType_name, int32(x))
}

func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a525bbab69d1e80, []int{0}
}

// WirePayForMessage describes the format of data that is sent over the wire for
// each PayForMessage
type MsgWirePayForMessage struct {
	Fee                    *TransactionFee           `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	Nonce                  uint64                    `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MessageNameSpaceId     []byte                    `protobuf:"bytes,3,opt,name=message_name_space_id,json=messageNameSpaceId,proto3" json:"message_name_space_id,omitempty"`
	MessageSize            uint64                    `protobuf:"varint,4,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	Message                []byte                    `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	MessageShareCommitment []ShareCommitAndSignature `protobuf:"bytes,6,rep,name=message_share_commitment,json=messageShareCommitment,proto3" json:"message_share_commitment"`
	From                   []byte                    `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgWirePayForMessage) Reset()         { *m = MsgWirePayForMessage{} }
func (m *MsgWirePayForMessage) String() string { return proto.CompactTextString(m) }
func (*MsgWirePayForMessage) ProtoMessage()    {}
func (*MsgWirePayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a525bbab69d1e80, []int{0}
}
func (m *MsgWirePayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWirePayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWirePayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWirePayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWirePayForMessage.Merge(m, src)
}
func (m *MsgWirePayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgWirePayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWirePayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWirePayForMessage proto.InternalMessageInfo

func (m *MsgWirePayForMessage) GetFee() *TransactionFee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *MsgWirePayForMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgWirePayForMessage) GetMessageNameSpaceId() []byte {
	if m != nil {
		return m.MessageNameSpaceId
	}
	return nil
}

func (m *MsgWirePayForMessage) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *MsgWirePayForMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MsgWirePayForMessage) GetMessageShareCommitment() []ShareCommitAndSignature {
	if m != nil {
		return m.MessageShareCommitment
	}
	return nil
}

func (m *MsgWirePayForMessage) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

// WirePayForMessageResponse describes the response returned after the submission of a MsgWirePayForMessage
type MsgWirePayForMessageResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgWirePayForMessageResponse) Reset()         { *m = MsgWirePayForMessageResponse{} }
func (m *MsgWirePayForMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWirePayForMessageResponse) ProtoMessage()    {}
func (*MsgWirePayForMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a525bbab69d1e80, []int{1}
}
func (m *MsgWirePayForMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWirePayForMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWirePayForMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWirePayForMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWirePayForMessageResponse.Merge(m, src)
}
func (m *MsgWirePayForMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWirePayForMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWirePayForMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWirePayForMessageResponse proto.InternalMessageInfo

func (m *MsgWirePayForMessageResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *MsgWirePayForMessageResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// ShareCommitAndSignature defines the
type ShareCommitAndSignature struct {
	ShareCommitment []byte `protobuf:"bytes,1,opt,name=share_commitment,json=shareCommitment,proto3" json:"share_commitment,omitempty"`
	Signature       []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ShareCommitAndSignature) Reset()         { *m = ShareCommitAndSignature{} }
func (m *ShareCommitAndSignature) String() string { return proto.CompactTextString(m) }
func (*ShareCommitAndSignature) ProtoMessage()    {}
func (*ShareCommitAndSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a525bbab69d1e80, []int{2}
}
func (m *ShareCommitAndSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareCommitAndSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareCommitAndSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareCommitAndSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareCommitAndSignature.Merge(m, src)
}
func (m *ShareCommitAndSignature) XXX_Size() int {
	return m.Size()
}
func (m *ShareCommitAndSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareCommitAndSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ShareCommitAndSignature proto.InternalMessageInfo

func (m *ShareCommitAndSignature) GetShareCommitment() []byte {
	if m != nil {
		return m.ShareCommitment
	}
	return nil
}

func (m *ShareCommitAndSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SignedTransactionsDataPayForMessage is what gets signed by users when
// creating ShareCommitSignatures. Multiple versions are signed and included.
type SignedTransactionDataPayForMessage struct {
	Type                   TransactionType `protobuf:"varint,1,opt,name=type,proto3,enum=lazyledgerapp.TransactionType" json:"type,omitempty"`
	Fee                    *TransactionFee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Nonce                  uint64          `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MessageNamespaceId     []byte          `protobuf:"bytes,4,opt,name=message_namespace_id,json=messageNamespaceId,proto3" json:"message_namespace_id,omitempty"`
	MessageSize            uint64          `protobuf:"varint,5,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	MessageShareCommitment []byte          `protobuf:"bytes,6,opt,name=message_share_commitment,json=messageShareCommitment,proto3" json:"message_share_commitment,omitempty"`
}

func (m *SignedTransactionDataPayForMessage) Reset()         { *m = SignedTransactionDataPayForMessage{} }
func (m *SignedTransactionDataPayForMessage) String() string { return proto.CompactTextString(m) }
func (*SignedTransactionDataPayForMessage) ProtoMessage()    {}
func (*SignedTransactionDataPayForMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a525bbab69d1e80, []int{3}
}
func (m *SignedTransactionDataPayForMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedTransactionDataPayForMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedTransactionDataPayForMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedTransactionDataPayForMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTransactionDataPayForMessage.Merge(m, src)
}
func (m *SignedTransactionDataPayForMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignedTransactionDataPayForMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTransactionDataPayForMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTransactionDataPayForMessage proto.InternalMessageInfo

func (m *SignedTransactionDataPayForMessage) GetType() TransactionType {
	if m != nil {
		return m.Type
	}
	return TRANSACTION_TYPE_UNSPECIFIED
}

func (m *SignedTransactionDataPayForMessage) GetFee() *TransactionFee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *SignedTransactionDataPayForMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SignedTransactionDataPayForMessage) GetMessageNamespaceId() []byte {
	if m != nil {
		return m.MessageNamespaceId
	}
	return nil
}

func (m *SignedTransactionDataPayForMessage) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *SignedTransactionDataPayForMessage) GetMessageShareCommitment() []byte {
	if m != nil {
		return m.MessageShareCommitment
	}
	return nil
}

// TransactionFee contains the base and tip rates.
type TransactionFee struct {
	BaseRateMax uint64 `protobuf:"varint,1,opt,name=base_rate_max,json=baseRateMax,proto3" json:"base_rate_max,omitempty"`
	TipRateMax  uint64 `protobuf:"varint,2,opt,name=tip_rate_max,json=tipRateMax,proto3" json:"tip_rate_max,omitempty"`
}

func (m *TransactionFee) Reset()         { *m = TransactionFee{} }
func (m *TransactionFee) String() string { return proto.CompactTextString(m) }
func (*TransactionFee) ProtoMessage()    {}
func (*TransactionFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a525bbab69d1e80, []int{4}
}
func (m *TransactionFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionFee.Merge(m, src)
}
func (m *TransactionFee) XXX_Size() int {
	return m.Size()
}
func (m *TransactionFee) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionFee.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionFee proto.InternalMessageInfo

func (m *TransactionFee) GetBaseRateMax() uint64 {
	if m != nil {
		return m.BaseRateMax
	}
	return 0
}

func (m *TransactionFee) GetTipRateMax() uint64 {
	if m != nil {
		return m.TipRateMax
	}
	return 0
}

func init() {
	proto.RegisterEnum("lazyledgerapp.TransactionType", TransactionType_name, TransactionType_value)
	proto.RegisterType((*MsgWirePayForMessage)(nil), "lazyledgerapp.MsgWirePayForMessage")
	proto.RegisterType((*MsgWirePayForMessageResponse)(nil), "lazyledgerapp.MsgWirePayForMessageResponse")
	proto.RegisterType((*ShareCommitAndSignature)(nil), "lazyledgerapp.ShareCommitAndSignature")
	proto.RegisterType((*SignedTransactionDataPayForMessage)(nil), "lazyledgerapp.SignedTransactionDataPayForMessage")
	proto.RegisterType((*TransactionFee)(nil), "lazyledgerapp.TransactionFee")
}

func init() { proto.RegisterFile("lazyledgerapp/tx.proto", fileDescriptor_4a525bbab69d1e80) }

var fileDescriptor_4a525bbab69d1e80 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x8f, 0xda, 0x46,
	0x14, 0xc7, 0x31, 0x98, 0xdd, 0xec, 0xc0, 0x26, 0x68, 0x44, 0x52, 0x07, 0x11, 0x97, 0xb8, 0x6d,
	0x44, 0x37, 0x2a, 0x4e, 0xe9, 0xa5, 0xea, 0xcd, 0x80, 0xa1, 0x48, 0xc1, 0xa0, 0xb1, 0x37, 0x55,
	0x7a, 0xb1, 0x06, 0x18, 0x8c, 0x25, 0xec, 0xb1, 0x3c, 0x8e, 0x04, 0x7b, 0xec, 0xa9, 0xc7, 0x4a,
	0x7b, 0x6c, 0x6f, 0xed, 0xa1, 0xa7, 0xfe, 0x1d, 0xdb, 0xdb, 0x4a, 0xbd, 0xf4, 0x54, 0x55, 0xbb,
	0xfd, 0x43, 0x2a, 0xdb, 0xb0, 0x6b, 0x30, 0xf4, 0xc7, 0x6d, 0xe6, 0xbd, 0xcf, 0xfb, 0xbe, 0xf1,
	0xf3, 0x77, 0x6c, 0xf0, 0x64, 0x81, 0x2f, 0x56, 0x0b, 0x32, 0xb5, 0x88, 0x8f, 0x3d, 0x4f, 0x0e,
	0x96, 0x0d, 0xcf, 0xa7, 0x01, 0x85, 0xa7, 0x5b, 0xf1, 0x4a, 0xd9, 0xa2, 0x16, 0x8d, 0x32, 0x72,
	0xb8, 0x8a, 0xa1, 0x4a, 0xd5, 0xa2, 0xd4, 0x5a, 0x10, 0x19, 0x7b, 0xb6, 0x8c, 0x5d, 0x97, 0x06,
	0x38, 0xb0, 0xa9, 0xcb, 0xe2, 0xac, 0xf4, 0x6b, 0x16, 0x94, 0x07, 0xcc, 0xfa, 0xca, 0xf6, 0xc9,
	0x08, 0xaf, 0xba, 0xd4, 0x1f, 0x10, 0xc6, 0xb0, 0x45, 0xa0, 0x0c, 0x72, 0x33, 0x42, 0x04, 0xae,
	0xc6, 0xd5, 0x0b, 0xcd, 0x67, 0x8d, 0xad, 0x4e, 0x0d, 0xc3, 0xc7, 0x2e, 0xc3, 0x93, 0x50, 0xa8,
	0x4b, 0x08, 0x0a, 0x49, 0x58, 0x06, 0x79, 0x97, 0xba, 0x13, 0x22, 0x64, 0x6b, 0x5c, 0x9d, 0x47,
	0xf1, 0x06, 0x7e, 0x0a, 0x1e, 0x3b, 0xb1, 0xa2, 0xe9, 0x62, 0x87, 0x98, 0xcc, 0xc3, 0x13, 0x62,
	0xda, 0x53, 0x21, 0x57, 0xe3, 0xea, 0x45, 0x04, 0xd7, 0x49, 0x0d, 0x3b, 0x44, 0x0f, 0x53, 0xfd,
	0x29, 0x7c, 0x0e, 0x8a, 0x9b, 0x12, 0x66, 0x5f, 0x10, 0x81, 0x8f, 0xf4, 0x0a, 0xeb, 0x98, 0x6e,
	0x5f, 0x10, 0x28, 0x80, 0xe3, 0xf5, 0x56, 0xc8, 0x47, 0x3a, 0x9b, 0x2d, 0x9c, 0x01, 0xe1, 0xae,
	0x78, 0x8e, 0x7d, 0x62, 0x4e, 0xa8, 0xe3, 0xd8, 0x81, 0x43, 0xdc, 0x40, 0x38, 0xaa, 0xe5, 0xea,
	0x85, 0xe6, 0x8b, 0x9d, 0x67, 0xd1, 0x43, 0xac, 0x1d, 0x51, 0x8a, 0x3b, 0xd5, 0x6d, 0xcb, 0xc5,
	0xc1, 0x3b, 0x9f, 0xb4, 0xf8, 0xab, 0x3f, 0xde, 0xcf, 0xa0, 0x27, 0x9b, 0xb6, 0xf7, 0x54, 0xa8,
	0x05, 0x21, 0xe0, 0x67, 0x3e, 0x75, 0x84, 0xe3, 0xa8, 0x7d, 0xb4, 0x96, 0xbe, 0x04, 0xd5, 0x7d,
	0xa3, 0x44, 0x84, 0x79, 0xd4, 0x65, 0xd1, 0x84, 0x88, 0xef, 0x53, 0x3f, 0x1a, 0xea, 0x09, 0x8a,
	0x37, 0xa1, 0xd2, 0x1c, 0xb3, 0x79, 0x34, 0xb6, 0x22, 0x8a, 0xd6, 0xd2, 0x18, 0xbc, 0x77, 0xe0,
	0x58, 0xf0, 0x63, 0x50, 0x4a, 0x3d, 0x18, 0x17, 0x95, 0x3e, 0x62, 0x3b, 0x67, 0xac, 0x82, 0x13,
	0xb6, 0xa9, 0x5b, 0xcb, 0xdf, 0x07, 0xa4, 0x5f, 0xb2, 0x40, 0x0a, 0x65, 0xc9, 0x34, 0xf1, 0x36,
	0x3b, 0x38, 0xc0, 0xdb, 0x3e, 0x68, 0x02, 0x3e, 0x58, 0x79, 0xb1, 0x11, 0x1e, 0x36, 0xc5, 0xc3,
	0x46, 0x30, 0x56, 0x1e, 0x41, 0x11, 0xbb, 0xf1, 0x4e, 0xf6, 0xff, 0x7b, 0x27, 0x97, 0xf4, 0xce,
	0x2b, 0x50, 0x4e, 0x7a, 0xe7, 0xce, 0x3a, 0x7c, 0xca, 0x3a, 0xec, 0x80, 0x75, 0xf2, 0x69, 0xeb,
	0x7c, 0xfe, 0x8f, 0x06, 0x09, 0x85, 0x0f, 0xbc, 0x72, 0xe9, 0x0d, 0x78, 0xb8, 0x7d, 0x76, 0x28,
	0x81, 0xd3, 0x31, 0x66, 0xc4, 0xf4, 0x71, 0x40, 0x4c, 0x07, 0x2f, 0xa3, 0x21, 0xf1, 0xa8, 0x10,
	0x06, 0x11, 0x0e, 0xc8, 0x00, 0x2f, 0x61, 0x0d, 0x14, 0x03, 0xdb, 0xbb, 0x47, 0xe2, 0xdb, 0x01,
	0x02, 0xdb, 0x5b, 0x13, 0x67, 0x3f, 0xe4, 0xc0, 0xa3, 0x9d, 0x39, 0xc2, 0x1a, 0xa8, 0x1a, 0x48,
	0xd1, 0x74, 0xa5, 0x6d, 0xf4, 0x87, 0x9a, 0x69, 0xbc, 0x1d, 0xa9, 0xe6, 0xb9, 0xa6, 0x8f, 0xd4,
	0x76, 0xbf, 0xdb, 0x57, 0x3b, 0xa5, 0x0c, 0x7c, 0x06, 0x9e, 0xa6, 0x88, 0x28, 0xd0, 0x55, 0x51,
	0x89, 0x83, 0x1f, 0x82, 0x5a, 0x2a, 0x3d, 0x52, 0xde, 0x9a, 0xdd, 0x21, 0x32, 0x07, 0xaa, 0xae,
	0x2b, 0x3d, 0xb5, 0x94, 0x85, 0x1f, 0x81, 0xe7, 0x29, 0xaa, 0x8d, 0x54, 0xc5, 0x50, 0xcd, 0x37,
	0xca, 0xeb, 0x7e, 0x47, 0x31, 0x86, 0xa8, 0x94, 0x83, 0x0d, 0x70, 0x96, 0xc2, 0x5a, 0x6a, 0xaf,
	0xaf, 0x99, 0xe7, 0x5a, 0x6b, 0xa8, 0x75, 0xfa, 0x5a, 0x2f, 0xc1, 0xf3, 0x7b, 0x65, 0x63, 0x32,
	0x81, 0xe5, 0xe1, 0x0b, 0x20, 0x1d, 0xea, 0xde, 0x51, 0x5f, 0xab, 0x3d, 0x25, 0x0c, 0x97, 0x8e,
	0xa0, 0x0c, 0x5e, 0xfe, 0x6b, 0xfb, 0x44, 0xc1, 0xf1, 0x5e, 0xe1, 0x75, 0xff, 0x04, 0xf7, 0x00,
	0x3e, 0x05, 0x8f, 0xd3, 0xc2, 0xe7, 0x48, 0x2b, 0x9d, 0x54, 0x1e, 0x7c, 0xfb, 0xa3, 0x98, 0xf9,
	0xf9, 0x27, 0x91, 0x6b, 0x7e, 0xcf, 0x81, 0xdc, 0x80, 0x59, 0xf0, 0x92, 0x03, 0xa7, 0xdb, 0x57,
	0xe3, 0x83, 0x1d, 0x67, 0xef, 0xbb, 0xfc, 0x95, 0x97, 0xff, 0x01, 0xda, 0x7c, 0x21, 0xa4, 0x57,
	0xdf, 0xfc, 0xf6, 0xd7, 0x65, 0xf6, 0x0c, 0xd6, 0xe5, 0x05, 0x5e, 0x6d, 0xaa, 0xe4, 0xed, 0xaf,
	0xbf, 0x87, 0x57, 0x33, 0xea, 0xaf, 0x3d, 0xda, 0x32, 0xae, 0x6e, 0x44, 0xee, 0xfa, 0x46, 0xe4,
	0xfe, 0xbc, 0x11, 0xb9, 0xef, 0x6e, 0xc5, 0xcc, 0xf5, 0xad, 0x98, 0xf9, 0xfd, 0x56, 0xcc, 0x7c,
	0xfd, 0x85, 0x65, 0x07, 0xf3, 0x77, 0xe3, 0xc6, 0x84, 0x3a, 0x09, 0x85, 0xc4, 0xf2, 0x93, 0x50,
	0x6d, 0xb9, 0xa3, 0x1e, 0xde, 0x5f, 0x36, 0x3e, 0x8a, 0x7e, 0x0e, 0x9f, 0xfd, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0xaf, 0x90, 0xc0, 0x7f, 0x79, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PayForMessage allows the user to post data to made be available.
	PayForMessage(ctx context.Context, in *MsgWirePayForMessage, opts ...grpc.CallOption) (*MsgWirePayForMessageResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PayForMessage(ctx context.Context, in *MsgWirePayForMessage, opts ...grpc.CallOption) (*MsgWirePayForMessageResponse, error) {
	out := new(MsgWirePayForMessageResponse)
	err := c.cc.Invoke(ctx, "/lazyledgerapp.Msg/PayForMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PayForMessage allows the user to post data to made be available.
	PayForMessage(context.Context, *MsgWirePayForMessage) (*MsgWirePayForMessageResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PayForMessage(ctx context.Context, req *MsgWirePayForMessage) (*MsgWirePayForMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForMessage not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PayForMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWirePayForMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lazyledgerapp.Msg/PayForMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForMessage(ctx, req.(*MsgWirePayForMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lazyledgerapp.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayForMessage",
			Handler:    _Msg_PayForMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lazyledgerapp/tx.proto",
}

func (m *MsgWirePayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWirePayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWirePayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MessageShareCommitment) > 0 {
		for iNdEx := len(m.MessageShareCommitment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageShareCommitment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MessageNameSpaceId) > 0 {
		i -= len(m.MessageNameSpaceId)
		copy(dAtA[i:], m.MessageNameSpaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageNameSpaceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWirePayForMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWirePayForMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWirePayForMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareCommitAndSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareCommitAndSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareCommitAndSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShareCommitment) > 0 {
		i -= len(m.ShareCommitment)
		copy(dAtA[i:], m.ShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareCommitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedTransactionDataPayForMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedTransactionDataPayForMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedTransactionDataPayForMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageShareCommitment) > 0 {
		i -= len(m.MessageShareCommitment)
		copy(dAtA[i:], m.MessageShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageShareCommitment)))
		i--
		dAtA[i] = 0x32
	}
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MessageNamespaceId) > 0 {
		i -= len(m.MessageNamespaceId)
		copy(dAtA[i:], m.MessageNamespaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageNamespaceId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TipRateMax != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TipRateMax))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseRateMax != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BaseRateMax))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgWirePayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.MessageNameSpaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MessageShareCommitment) > 0 {
		for _, e := range m.MessageShareCommitment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWirePayForMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ShareCommitAndSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SignedTransactionDataPayForMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTx(uint64(m.Type))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.MessageNamespaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	l = len(m.MessageShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TransactionFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRateMax != 0 {
		n += 1 + sovTx(uint64(m.BaseRateMax))
	}
	if m.TipRateMax != 0 {
		n += 1 + sovTx(uint64(m.TipRateMax))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgWirePayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWirePayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWirePayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &TransactionFee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNameSpaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageNameSpaceId = append(m.MessageNameSpaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageNameSpaceId == nil {
				m.MessageNameSpaceId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageShareCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageShareCommitment = append(m.MessageShareCommitment, ShareCommitAndSignature{})
			if err := m.MessageShareCommitment[len(m.MessageShareCommitment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWirePayForMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWirePayForMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWirePayForMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareCommitAndSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareCommitAndSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareCommitAndSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCommitment = append(m.ShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareCommitment == nil {
				m.ShareCommitment = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedTransactionDataPayForMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedTransactionDataPayForMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedTransactionDataPayForMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TransactionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &TransactionFee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageNamespaceId = append(m.MessageNamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageNamespaceId == nil {
				m.MessageNamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageShareCommitment = append(m.MessageShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageShareCommitment == nil {
				m.MessageShareCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRateMax", wireType)
			}
			m.BaseRateMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseRateMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipRateMax", wireType)
			}
			m.TipRateMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TipRateMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
