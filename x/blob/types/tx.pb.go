// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blob/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ShareCommitAndSignature defines the
type ShareCommitAndSignature struct {
	// share_commitment is the root of a binary Merkle tree that has leaves which
	// are subtree roots of the relevant blob shares in the original data
	// square.
	ShareCommitment []byte `protobuf:"bytes,2,opt,name=share_commitment,json=shareCommitment,proto3" json:"share_commitment,omitempty"`
	Signature       []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ShareCommitAndSignature) Reset()         { *m = ShareCommitAndSignature{} }
func (m *ShareCommitAndSignature) String() string { return proto.CompactTextString(m) }
func (*ShareCommitAndSignature) ProtoMessage()    {}
func (*ShareCommitAndSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f945cb94fe124aae, []int{0}
}
func (m *ShareCommitAndSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareCommitAndSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareCommitAndSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareCommitAndSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareCommitAndSignature.Merge(m, src)
}
func (m *ShareCommitAndSignature) XXX_Size() int {
	return m.Size()
}
func (m *ShareCommitAndSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareCommitAndSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ShareCommitAndSignature proto.InternalMessageInfo

func (m *ShareCommitAndSignature) GetShareCommitment() []byte {
	if m != nil {
		return m.ShareCommitment
	}
	return nil
}

func (m *ShareCommitAndSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgPayForBlob pays for the inclusion of a blob in the block.
type MsgPayForBlob struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	NamespaceId []byte `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	BlobSize    uint32 `protobuf:"varint,3,opt,name=blob_size,json=blobSize,proto3" json:"blob_size,omitempty"`
	// share_commitment is the share_commitment from
	// ShareCommitAndSignature that will be included in a block
	ShareCommitment []byte `protobuf:"bytes,4,opt,name=share_commitment,json=shareCommitment,proto3" json:"share_commitment,omitempty"`
	// share_version is the version of the share format that the blob associated
	// with this message should use when included in a block. The share_version
	// specified must match the share_version used to generate the
	// share_commitment in this message.
	ShareVersion uint32 `protobuf:"varint,8,opt,name=share_version,json=shareVersion,proto3" json:"share_version,omitempty"`
}

func (m *MsgPayForBlob) Reset()         { *m = MsgPayForBlob{} }
func (m *MsgPayForBlob) String() string { return proto.CompactTextString(m) }
func (*MsgPayForBlob) ProtoMessage()    {}
func (*MsgPayForBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f945cb94fe124aae, []int{1}
}
func (m *MsgPayForBlob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForBlob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForBlob.Merge(m, src)
}
func (m *MsgPayForBlob) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForBlob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForBlob proto.InternalMessageInfo

func (m *MsgPayForBlob) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgPayForBlob) GetNamespaceId() []byte {
	if m != nil {
		return m.NamespaceId
	}
	return nil
}

func (m *MsgPayForBlob) GetBlobSize() uint32 {
	if m != nil {
		return m.BlobSize
	}
	return 0
}

func (m *MsgPayForBlob) GetShareCommitment() []byte {
	if m != nil {
		return m.ShareCommitment
	}
	return nil
}

func (m *MsgPayForBlob) GetShareVersion() uint32 {
	if m != nil {
		return m.ShareVersion
	}
	return 0
}

// MsgPayForBlobResponse describes the response returned after the submission
// of a PayForBlob
type MsgPayForBlobResponse struct {
}

func (m *MsgPayForBlobResponse) Reset()         { *m = MsgPayForBlobResponse{} }
func (m *MsgPayForBlobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayForBlobResponse) ProtoMessage()    {}
func (*MsgPayForBlobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f945cb94fe124aae, []int{2}
}
func (m *MsgPayForBlobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForBlobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForBlobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForBlobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForBlobResponse.Merge(m, src)
}
func (m *MsgPayForBlobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForBlobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForBlobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForBlobResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ShareCommitAndSignature)(nil), "blob.ShareCommitAndSignature")
	proto.RegisterType((*MsgPayForBlob)(nil), "blob.MsgPayForBlob")
	proto.RegisterType((*MsgPayForBlobResponse)(nil), "blob.MsgPayForBlobResponse")
}

func init() { proto.RegisterFile("blob/tx.proto", fileDescriptor_f945cb94fe124aae) }

var fileDescriptor_f945cb94fe124aae = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0xaa, 0xda, 0x40,
	0x14, 0xc6, 0x8d, 0x8a, 0xe8, 0xd4, 0xd0, 0x32, 0xfd, 0x63, 0xaa, 0x12, 0x34, 0xdd, 0xd8, 0x45,
	0x93, 0xd2, 0x3e, 0x41, 0x2d, 0x14, 0x5a, 0x10, 0x4a, 0x84, 0x2e, 0xba, 0x91, 0x49, 0x9c, 0x8e,
	0x03, 0xc9, 0x9c, 0x61, 0x66, 0x2c, 0xea, 0xb2, 0x4f, 0x50, 0xe8, 0xc3, 0xf4, 0x15, 0xba, 0x14,
	0xba, 0xb9, 0xcb, 0x8b, 0xde, 0x07, 0xb9, 0x4c, 0xe2, 0x9f, 0x2b, 0xb8, 0x3b, 0xf3, 0xfb, 0xe6,
	0x3b, 0xe7, 0x3b, 0x1c, 0xe4, 0x26, 0x19, 0x24, 0x91, 0x59, 0x85, 0x52, 0x81, 0x01, 0x5c, 0xb7,
	0xcf, 0xee, 0x33, 0x06, 0x0c, 0x0a, 0x10, 0xd9, 0xaa, 0xd4, 0xba, 0x7d, 0x06, 0xc0, 0x32, 0x1a,
	0x11, 0xc9, 0x23, 0x22, 0x04, 0x18, 0x62, 0x38, 0x08, 0x5d, 0xaa, 0x41, 0x82, 0x3a, 0xd3, 0x05,
	0x51, 0xf4, 0x23, 0xe4, 0x39, 0x37, 0x1f, 0xc4, 0x7c, 0xca, 0x99, 0x20, 0x66, 0xa9, 0x28, 0x7e,
	0x8d, 0x9e, 0x68, 0x2b, 0xcd, 0xd2, 0x42, 0xcb, 0xa9, 0x30, 0x5e, 0x75, 0xe0, 0x8c, 0xda, 0xf1,
	0x63, 0x7d, 0xb6, 0x58, 0x8c, 0xfb, 0xa8, 0xa5, 0x8f, 0x3e, 0xaf, 0x56, 0xfc, 0x39, 0x83, 0xe0,
	0xaf, 0x83, 0xdc, 0x89, 0x66, 0x5f, 0xc9, 0xfa, 0x13, 0xa8, 0x71, 0x06, 0x09, 0x7e, 0x81, 0x1a,
	0x56, 0xa6, 0xca, 0x73, 0x06, 0xce, 0xa8, 0x15, 0x1f, 0x5e, 0x78, 0x88, 0xda, 0x82, 0xe4, 0x54,
	0x4b, 0x92, 0xd2, 0x19, 0x9f, 0x1f, 0xc6, 0x3d, 0x3a, 0xb1, 0xcf, 0x73, 0xdc, 0x43, 0x2d, 0xbb,
	0xec, 0x4c, 0xf3, 0x4d, 0x39, 0xca, 0x8d, 0x9b, 0x16, 0x4c, 0xf9, 0xe6, 0x7a, 0xe4, 0xfa, 0xf5,
	0xc8, 0xaf, 0x90, 0x5b, 0x7e, 0xfd, 0x49, 0x95, 0xe6, 0x20, 0xbc, 0x66, 0xd1, 0xab, 0x5d, 0xc0,
	0x6f, 0x25, 0x0b, 0x3a, 0xe8, 0xf9, 0x45, 0xf0, 0x98, 0x6a, 0x09, 0x42, 0xd3, 0x77, 0x0b, 0x54,
	0x9b, 0x68, 0x86, 0x09, 0x42, 0x0f, 0xb6, 0x7a, 0x1a, 0xda, 0x20, 0xe1, 0x85, 0xa3, 0xdb, 0xbb,
	0x02, 0x8f, 0x6d, 0x82, 0xe1, 0xaf, 0xff, 0x77, 0x7f, 0xaa, 0x3d, 0xfc, 0x32, 0x4a, 0x69, 0x46,
	0xb5, 0xe1, 0x24, 0x2a, 0x0e, 0x2b, 0xc9, 0xfa, 0x07, 0x28, 0x5b, 0x8e, 0xbf, 0xfc, 0xdb, 0xf9,
	0xce, 0x76, 0xe7, 0x3b, 0xb7, 0x3b, 0xdf, 0xf9, 0xbd, 0xf7, 0x2b, 0xdb, 0xbd, 0x5f, 0xb9, 0xd9,
	0xfb, 0x95, 0xef, 0x6f, 0x19, 0x37, 0x8b, 0x65, 0x12, 0xa6, 0x90, 0x9f, 0xec, 0xa0, 0xd8, 0xa9,
	0x7e, 0x43, 0xa4, 0x8c, 0x56, 0x65, 0x43, 0xb3, 0x96, 0x54, 0x27, 0x8d, 0xe2, 0xe6, 0xef, 0xef,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x1f, 0x3a, 0x3e, 0x3e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PayForBlob allows the user to pay for the inclusion of a blob
	PayForBlob(ctx context.Context, in *MsgPayForBlob, opts ...grpc.CallOption) (*MsgPayForBlobResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PayForBlob(ctx context.Context, in *MsgPayForBlob, opts ...grpc.CallOption) (*MsgPayForBlobResponse, error) {
	out := new(MsgPayForBlobResponse)
	err := c.cc.Invoke(ctx, "/blob.Msg/PayForBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PayForBlob allows the user to pay for the inclusion of a blob
	PayForBlob(context.Context, *MsgPayForBlob) (*MsgPayForBlobResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PayForBlob(ctx context.Context, req *MsgPayForBlob) (*MsgPayForBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForBlob not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PayForBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayForBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blob.Msg/PayForBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForBlob(ctx, req.(*MsgPayForBlob))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blob.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayForBlob",
			Handler:    _Msg_PayForBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blob/tx.proto",
}

func (m *ShareCommitAndSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareCommitAndSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareCommitAndSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareCommitment) > 0 {
		i -= len(m.ShareCommitment)
		copy(dAtA[i:], m.ShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareCommitment)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForBlob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForBlob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForBlob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShareVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ShareVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ShareCommitment) > 0 {
		i -= len(m.ShareCommitment)
		copy(dAtA[i:], m.ShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareCommitment)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlobSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlobSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForBlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForBlobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForBlobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShareCommitAndSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPayForBlob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlobSize != 0 {
		n += 1 + sovTx(uint64(m.BlobSize))
	}
	l = len(m.ShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ShareVersion != 0 {
		n += 1 + sovTx(uint64(m.ShareVersion))
	}
	return n
}

func (m *MsgPayForBlobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShareCommitAndSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareCommitAndSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareCommitAndSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCommitment = append(m.ShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareCommitment == nil {
				m.ShareCommitment = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForBlob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForBlob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForBlob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = append(m.NamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.NamespaceId == nil {
				m.NamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobSize", wireType)
			}
			m.BlobSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCommitment = append(m.ShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareCommitment == nil {
				m.ShareCommitment = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareVersion", wireType)
			}
			m.ShareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForBlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForBlobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForBlobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
