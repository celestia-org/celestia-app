syntax = "proto3";
package blob;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/blob/types";

// Msg defines the blob Msg service.
service Msg {
  // PayForBlob allows the user to pay for the inclusion of a blob
  rpc PayForBlob(MsgPayForBlob) returns (MsgPayForBlobResponse) {
    option (google.api.http).get = "/celestia/blob/payforblob";
  }
}

// ShareCommitAndSignature defines the
message ShareCommitAndSignature {
  // share_commitment is the root of a binary Merkle tree that has leaves which
  // are subtree roots of the relevant blob shares in the original data
  // square.
  bytes share_commitment = 2;
  bytes signature = 3; // signature on one SignedTransactionPayForBlob
}

// MsgPayForBlob pays for the inclusion of a blob in the block.
message MsgPayForBlob {
  string signer = 1;
  repeated bytes namespace_ids = 2;
  repeated uint32 blob_sizes = 3;
  // share_commitment is the share_commitment from
  // ShareCommitAndSignature that will be included in a block
  bytes share_commitment = 4;
  // share_versions are the versions of the share format that the blobs
  // associated with this message should use when included in a block. The
  // share_versions specified must match the share_versions used to generate the
  // share_commitment in this message.
  repeated uint32 share_versions = 8;
}

// MsgPayForBlobResponse describes the response returned after the submission
// of a PayForBlob
message MsgPayForBlobResponse {}
