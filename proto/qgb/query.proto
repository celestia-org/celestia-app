syntax = "proto3";
package qgb;

import "qgb/genesis.proto";
import "qgb/types.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "qgb/msgs.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/qgb/types";

// Query defines the gRPC querier service.
service Query {
  // Params Queries the current parameters for the qgb module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/qgb/params";
  }

  // attestations' requests queries

  // AttestationRequestByNonce Queries attestation request by nonce.
  // Returns nil if not found.
  rpc AttestationRequestByNonce(QueryAttestationRequestByNonceRequest)
      returns (QueryAttestationRequestByNonceResponse) {
    option (google.api.http).get = "/qgb/attestations/requests/{nonce}";
  }
  // LatestAttestationNonce Queries latest attestation nonce.
  rpc LatestAttestationNonce(QueryLatestAttestationNonceRequest)
      returns (QueryLatestAttestationNonceResponse) {
    option (google.api.http).get = "/qgb/attestations/nonce/latest";
  }

  // Data commitment confirm queries

  // DataCommitmentConfirm Queries the data commitment confirm by the commitment
  // and the validator address
  // Returns nil if not found.
  rpc DataCommitmentConfirm(QueryDataCommitmentConfirmRequest)
      returns (QueryDataCommitmentConfirmResponse) {
    option (google.api.http).get =
        "/qgb/data_commitment/confirm/begin/"
        "{begin_block}/end/{end_block}/address/{address}";
  }
  // DataCommitmentConfirmsByExactRange Queries data commitment confirms by an
  // exact block range.
  // Returns empty array if no element is found.
  rpc DataCommitmentConfirmsByExactRange(
      QueryDataCommitmentConfirmsByExactRangeRequest)
      returns (QueryDataCommitmentConfirmsByExactRangeResponse) {
    option (google.api.http).get =
        "/qgb/data_commitment/confirms/exact/begin_block/"
        "{begin_block}/end_block/{end_block}";
  }

  // valset confirm queries

  // ValsetConfirm Queries ValSetConfirm
  // Returns nil if not found.
  rpc ValsetConfirm(QueryValsetConfirmRequest)
      returns (QueryValsetConfirmResponse) {
    option (google.api.http).get = "/qgb/valset/confirm";
  }
  // LastValsetRequestBeforeNonce Queries last Valset request before nonce.
  // And, even if the current nonce is a valset, if will return the previous
  // one.
  // If the provided nonce is 1. It will return an error. Because, there is
  // no valset before nonce 1.
  rpc LastValsetRequestBeforeNonce(QueryLastValsetRequestBeforeNonceRequest)
      returns (QueryLastValsetRequestBeforeNonceResponse) {
    option (google.api.http).get = "/qgb/valset/request/before/{nonce}";
  }
  // ValsetConfirmsByNonce
  // Returns empty array if no element is found.
  rpc ValsetConfirmsByNonce(QueryValsetConfirmsByNonceRequest)
      returns (QueryValsetConfirmsByNonceResponse) {
    option (google.api.http).get = "/qgb/confirms/{nonce}";
  }

  // misc

  // LastUnbondingHeight
  rpc LastUnbondingHeight(QueryLastUnbondingHeightRequest)
      returns (QueryLastUnbondingHeightResponse) {
    option (google.api.http).get = "/qgb/unbonding";
  }
}

// QueryParamsRequest
message QueryParamsRequest {}
// QueryParamsResponse
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryAttestationRequestByNonceRequest
message QueryAttestationRequestByNonceRequest { uint64 nonce = 1; }

// QueryAttestationRequestByNonceResponse
message QueryAttestationRequestByNonceResponse {
  // AttestationRequestI is either a Data Commitment or a Valset.
  // This was decided as part of the universal nonce approach under:
  // https://github.com/celestiaorg/celestia-app/issues/468#issuecomment-1156887715
  google.protobuf.Any attestation = 1
      [ (cosmos_proto.accepts_interface) = "AttestationRequestI" ];
}

// QueryLatestAttestationNonceRequest Latest attestation nonce request
message QueryLatestAttestationNonceRequest {}
// QueryLatestAttestationNonceResponse Latest attestation nonce response
message QueryLatestAttestationNonceResponse { uint64 nonce = 1; }

// QueryValsetConfirmsByNonceRequest
message QueryValsetConfirmsByNonceRequest { uint64 nonce = 1; }

// QueryValsetConfirmsByNonceResponse
message QueryValsetConfirmsByNonceResponse {
  repeated MsgValsetConfirm confirms = 1 [ (gogoproto.nullable) = false ];
}

// QueryValsetConfirmRequest ValSet confirm query request
message QueryValsetConfirmRequest {
  uint64 nonce = 1;
  string address = 2;
}

// QueryValsetConfirmResponse ValSet confirm query response
message QueryValsetConfirmResponse { MsgValsetConfirm confirm = 1; }

// QueryLastValsetRequestBeforeNonceRequest last Valset request before universal
// nonce request
message QueryLastValsetRequestBeforeNonceRequest { uint64 nonce = 1; }

// QueryLastValsetRequestBeforeNonceResponse last Valset request before height
// response
message QueryLastValsetRequestBeforeNonceResponse { Valset valset = 1; }

// QueryDataCommitmentConfirmsRequest Data commitment confirm by commitment and
// validator address request
message QueryDataCommitmentConfirmRequest {
  uint64 begin_block = 1;
  uint64 end_block = 2;
  string address = 3;
}

// QueryDataCommitmentConfirmsResponse Data commitment confirm by commitment and
// validator address response
message QueryDataCommitmentConfirmResponse {
  MsgDataCommitmentConfirm confirm = 1;
}

// QueryDataCommitmentConfirmsByExactRangeRequest Data commitment confirms by
// exact range request
message QueryDataCommitmentConfirmsByExactRangeRequest {
  uint64 begin_block = 1;
  uint64 end_block = 2;
}

// QueryDataCommitmentConfirmsByExactRangeResponse Data commitment confirms by
// exact range response
message QueryDataCommitmentConfirmsByExactRangeResponse {
  repeated MsgDataCommitmentConfirm confirms = 1
      [ (gogoproto.nullable) = false ];
}

// QueryLastUnbondingHeightRequest
message QueryLastUnbondingHeightRequest {}

// QueryLastUnbondingHeightResponse
message QueryLastUnbondingHeightResponse { uint64 height = 1; }
